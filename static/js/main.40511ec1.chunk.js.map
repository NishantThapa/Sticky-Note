{"version":3,"sources":["Note.js","Board.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editing","edit","bind","assertThisInitialized","remove","renderForm","renderDisplay","save","textarea","_newText","focus","select","nextProps","nextState","children","setState","onRemove","index","e","preventDefault","onChange","value","_this2","react_default","a","createElement","className","onSubmit","ref","input","defaultValue","id","onClick","fa","React","Component","Board","notes","eachNote","update","nextId","add","count","text","prevState","concat","toConsumableArray","note","uniqueId","newText","i","console","log","map","objectSpread","filter","src_Note","key","Boolean","window","location","hostname","match","ReactDOM","render","src_Board","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40511ec1.chunk.js","sourcesContent":["import React from 'react';\nimport {FaPencilAlt} from 'react-icons/fa'\nimport {FaTrash} from 'react-icons/fa'\nimport { userInfo } from 'os';\nclass Note extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            editing: false\n        }\n        this.edit = this.edit.bind(this)\n        this.remove= this.remove.bind(this)\n        this.renderForm = this.renderForm.bind(this)\n        this.renderDisplay = this.renderDisplay.bind(this)\n        this.save = this.save.bind(this)\n    }\n\n    componentDidUpdate(){\n        var textarea\n        if(this.state.editing){\n            textarea=this._newText\n            textarea.focus()\n            textarea.select()\n\n        }\n    }\n\n    shouldComponentUpdate(nextProps,nextState){\n        return(\n            this.props.children!==nextProps.children || this.state!== nextState\n        )\n    }\n    edit(){\n        this.setState({\n            editing: true \n        })\n    }\n    remove(){ \n       this.props.onRemove(this.props.index)\n    }\n    save(e){\n        e.preventDefault()\n        this.props.onChange(this._newText.value,this.props.index)\n        this.setState ({\n            editing:false\n        })\n\n       \n    }\n    renderForm(){\n        return(\n            <div className =\"note\">\n                <form onSubmit={this.save}>\n                   <textarea ref = {input => this._newText = input}\n                    defaultValue = {this.props.children}/>\n                   <button id=\"save\">save</button>\n                </form>\n            </div>\n        )\n    }\nrenderDisplay(){\n    return(\n        <div className=\"note\">\n<p>{this.props.children}</p>\n<span>\n<button onClick={this.edit}id =\"edit\"><FaPencilAlt/></button>\n<button onClick={this.remove}id=\"remove\"><FaTrash/></button>\n</span>\n        </div>\n    )\n}\n\nrender(){\n    return this.state.editing ? this.renderForm() : this.renderDisplay()    \n}\n}\nexport default Note;\n","import React from 'react'\nimport Note from './Note'\nclass Board extends React.Component{\n    constructor(props){\n        super(props)\n        this.state ={\n            notes:[]\n        }\nthis.eachNote =this.eachNote.bind(this)\nthis.update=this.update.bind(this)\nthis.remove=this.remove.bind(this)\nthis.nextId=this.nextId.bind(this)\nthis.add = this.add.bind(this)\n\n    }\n    componentWillMount(){\n        var self = this\n        if(this.props.count){\n\n        }\n    }\n    add(text){\n        this.setState(prevState=>({\n            notes:[\n                ...prevState.notes,\n                {\n                    id:this.nextId(),\n                    note:text\n                }\n            ]\n        }))\n    }\n    nextId() {\n        this.uniqueId = this.uniqueId || 0\n        return this.uniqueId++\n    }\n    update(newText,i){ \n        console.log('updating',i,newText)\n        this.setState(prevState=>({\n            notes: prevState.notes.map(\n                note=>(note.id!==i)? note : {...note,note:newText}\n            )\n        }))\n       \n    }\n   \n    remove(id){\n        console.log('removing',id)\n        this.setState(prevState=>({\n            notes: prevState.notes.filter(note=>note.id!==id)\n        }))\n    }\n    eachNote(note,i){\n        return( \n            <Note key={note.id}\n            index={note.id}\n            onChange={this.update}\n            onRemove={this.remove}>\n            {note.note}\n            </Note>\n        )\n    }\n    render(){\n        return(\n            <div className=\"board\">\n                {this.state.notes.map(this.eachNote)}\n                <button onClick={this.add.bind(null,\"new note\")} id=\"add\">add</button>\n            </div>\n        )\n    }\n}\n\nexport default Board;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}